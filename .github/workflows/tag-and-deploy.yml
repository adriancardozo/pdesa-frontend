name: Create tag

on:
  pull_request:
    branches: ['main']
    types:
      - closed
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  APP_SETTINGS: ${{ format(vars.APP_SETTINGS, secrets.REGISTRY_PASSWORD, vars.REGISTRY_URL, vars.REGISTRY_USERNAME, vars.BACKEND_URL) }}
jobs:
  create_tag_if_merged:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release-v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: version
        id: version
        run: |
          echo "TAG_NAME=v$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.version.outputs.TAG_NAME }}
        run: |
          gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${tag#v}" \
              --generate-notes
      - run: |
          echo ${{ steps.version.outputs.TAG_NAME }}
  build-and-push-image:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release-v')
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Retrieve version
        id: version
        run: |
          echo "TAG_NAME=$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.version.outputs.TAG_NAME }}
            latest
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          build-args: |
            "VITE_SELF_VERSION=${{ steps.version.outputs.TAG_NAME }}"
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
  deploy-azure:
    needs: [build-and-push-image]
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'release-v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Retrieve version
        id: version
        run: |
          echo "TAG_NAME=$(npm pkg get version | tr -d '"')" >> $GITHUB_OUTPUT
      - name: 'Login with Azure'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: 'Pull and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ format('https://{0}', vars.REGISTRY_URL) }}
          username: ${{ vars.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.TAG_NAME }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.TAG_NAME }} ${{ vars.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.TAG_NAME }}
          docker push ${{ vars.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.TAG_NAME }}
      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ vars.WEBAPP_NAME }}
          images: ${{ vars.REGISTRY_URL }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.TAG_NAME }}
      - uses: azure/appservice-settings@v1
        with:
          app-name: ${{ vars.WEBAPP_NAME }}
          app-settings-json: ${{ env.APP_SETTINGS }}
          id: settings
      - name: 'Azure logout'
        run: |
          az logout
